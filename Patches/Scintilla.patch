diff -druN --strip-trailing-cr original/include/SciLexer.h modified/include/SciLexer.h
--- original/include/SciLexer.h	2010-09-01 05:13:29.000000000 +0200
+++ modified/include/SciLexer.h	2010-09-11 02:02:55.563476600 +0200
@@ -112,6 +112,7 @@
 #define SCLEX_SML 97
 #define SCLEX_MARKDOWN 98
 #define SCLEX_TXT2TAGS 99
+#define SCLEX_BIBTEX 999
 #define SCLEX_AUTOMATIC 1000
 #define SCE_P_DEFAULT 0
 #define SCE_P_COMMENTLINE 1
@@ -772,6 +773,14 @@
 #define SCE_TEX_SYMBOL 3
 #define SCE_TEX_COMMAND 4
 #define SCE_TEX_TEXT 5
+#define SCE_TEX_INLINE_MATH 6
+#define SCE_TEX_INLINE_MATH_COMMAND 7
+#define SCE_TEX_COMMENT 8
+#define SCE_TEX_DIGIT 9
+#define SCE_TEX_UNIT 10
+#define SCE_TEX_GROUP_NAME 11
+#define SCE_TEX_DOCUMENTCLASS 12
+#define SCE_TEX_USE_PACKAGE 13
 #define SCE_METAPOST_DEFAULT 0
 #define SCE_METAPOST_SPECIAL 1
 #define SCE_METAPOST_GROUP 2
@@ -1386,6 +1395,13 @@
 #define SCE_MARKDOWN_STRIKEOUT 16
 #define SCE_MARKDOWN_HRULE 17
 #define SCE_MARKDOWN_LINK 18
+#define SCE_BIBTEX_DEFAULT 0
+#define SCE_BIBTEX_ENTRY 1
+#define SCE_BIBTEX_UNKNOWN_ENTRY 2
+#define SCE_BIBTEX_KEY 3
+#define SCE_BIBTEX_PARAMETER 4
+#define SCE_BIBTEX_VALUE 5
+#define SCE_BIBTEX_COMMENT 6
 #define SCE_MARKDOWN_CODE 19
 #define SCE_MARKDOWN_CODE2 20
 #define SCE_MARKDOWN_CODEBK 21
diff -druN --strip-trailing-cr original/include/Scintilla.h modified/include/Scintilla.h
--- original/include/Scintilla.h	2010-09-01 05:13:29.000000000 +0200
+++ modified/include/Scintilla.h	2010-09-11 01:45:34.223632800 +0200
@@ -809,6 +809,7 @@
 #define SCI_PROPERTYTYPE 4015
 #define SCI_DESCRIBEPROPERTY 4016
 #define SCI_DESCRIBEKEYWORDSETS 4017
+#define SCI_SHOWCURSOR 9999
 #define SC_MOD_INSERTTEXT 0x1
 #define SC_MOD_DELETETEXT 0x2
 #define SC_MOD_CHANGESTYLE 0x4
diff -druN --strip-trailing-cr original/include/Scintilla.iface modified/include/Scintilla.iface
--- original/include/Scintilla.iface	2010-09-01 05:13:29.000000000 +0200
+++ modified/include/Scintilla.iface	2010-09-11 02:02:46.450195300 +0200
@@ -2158,6 +2158,8 @@
 # Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
 fun int DescribeKeyWordSets=4017(, stringresult descriptions)
 
+fun void ShowCursor=9999(bool show,)
+
 # Notifications
 # Type of modification and the action which caused the modification.
 # These are defined as a bit mask to make it easy to specify which notifications are wanted.
@@ -2327,6 +2329,8 @@
 val SCLEX_SML=97
 val SCLEX_MARKDOWN=98
 val SCLEX_TXT2TAGS=99
+# TeXnicCenter
+val SCLEX_BIBTEX=999
 
 # When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
 # value assigned in sequence from SCLEX_AUTOMATIC+1.
@@ -3088,6 +3092,15 @@
 val SCE_TEX_SYMBOL=3
 val SCE_TEX_COMMAND=4
 val SCE_TEX_TEXT=5
+val SCE_TEX_INLINE_MATH=6
+val SCE_TEX_INLINE_MATH_COMMAND=7
+val SCE_TEX_COMMENT=8
+val SCE_TEX_DIGIT=9
+val SCE_TEX_UNIT=10
+val SCE_TEX_GROUP_NAME=11
+val SCE_TEX_DOCUMENTCLASS=12
+val SCE_TEX_USE_PACKAGE=13
+
 lex Metapost=SCLEX_METAPOST SCE_METAPOST_
 val SCE_METAPOST_DEFAULT=0
 val SCE_METAPOST_SPECIAL=1
@@ -3780,6 +3793,15 @@
 val SCE_MARKDOWN_STRIKEOUT=16
 val SCE_MARKDOWN_HRULE=17
 val SCE_MARKDOWN_LINK=18
+# Lexical state for SCLEX_BIBTEX
+lex BibTeX=SCLEX_BIBTEX SCE_BIBTEX_
+val SCE_BIBTEX_DEFAULT=0
+val SCE_BIBTEX_ENTRY=1
+val SCE_BIBTEX_UNKNOWN_ENTRY=2
+val SCE_BIBTEX_KEY=3
+val SCE_BIBTEX_PARAMETER=4
+val SCE_BIBTEX_VALUE=5
+val SCE_BIBTEX_COMMENT=6
 val SCE_MARKDOWN_CODE=19
 val SCE_MARKDOWN_CODE2=20
 val SCE_MARKDOWN_CODEBK=21
diff -druN --strip-trailing-cr original/lexers/LexBibTeX.cxx modified/lexers/LexBibTeX.cxx
--- original/lexers/LexBibTeX.cxx	1970-01-01 01:00:00.000000000 +0100
+++ modified/lexers/LexBibTeX.cxx	2010-09-11 02:14:28.874023500 +0200
@@ -0,0 +1,315 @@
+// Copyright 2008-2010 Sergiu Dotenco. The License.txt file describes the 
+// conditions under which this software may be distributed.
+
+/**
+ * @file LexBibTeX.cxx
+ * @brief General BibTeX coloring scheme.
+ * @author Sergiu Dotenco
+ * @date April 18, 2009
+ */
+
+#include <stdlib.h>
+#include <string.h>
+
+#include <string>
+#include <algorithm>
+#include <functional>
+#include <cassert>
+#include <cctype>
+
+#include "ILexer.h"
+#include "Scintilla.h"
+#include "SciLexer.h"
+
+#include "PropSetSimple.h"
+#include "WordList.h"
+#include "LexAccessor.h"
+#include "Accessor.h"
+#include "StyleContext.h"
+#include "CharacterSet.h"
+#include "LexerModule.h"
+
+#ifdef SCI_NAMESPACE
+using namespace Scintilla;
+#endif
+
+namespace {
+	bool IsAlphabetic(unsigned int ch)
+	{
+		return std::isalpha(ch) != 0;
+	}
+
+	bool EqualCaseInsensitive(const char* a, const char* b)
+	{
+		return CompareCaseInsensitive(a, b) == 0;
+	}
+
+	const std::size_t ShortestEntryNameLength = 3;
+
+	bool IsKnownEntryName(const char* name)
+	{
+		static const char* entries[] = {
+			"article","book","booklet","conference","inbook",
+			"incollection","inproceedings","manual","mastersthesis",
+			"misc","phdthesis","proceedings","techreport","unpublished","string","url"};
+		static const std::size_t n = sizeof(entries) / sizeof(*entries);
+
+		return std::find_if(entries, entries + n, 
+			std::bind2nd(std::ptr_fun(EqualCaseInsensitive), name)) != entries + n;
+	}
+
+	bool EntryWithoutKey(const char* name)
+	{
+		return EqualCaseInsensitive(name,"string");
+	}
+
+	char GetClosingBrace(char openbrace)
+	{
+		char result = openbrace;
+
+		switch (openbrace) {
+			case '(': result = ')'; break;
+			case '{': result = '}'; break;
+		}
+
+		return result;
+	}
+
+	bool IsEntryStart(char prev, char ch)
+	{
+		return prev != '\\' && ch == '@';
+	}
+
+	bool IsEntryStart(const StyleContext& sc)
+	{
+		return IsEntryStart(sc.chPrev, sc.ch);
+	}
+
+	bool IsNextEntryStart(const StyleContext& sc)
+	{
+		return IsEntryStart(sc.ch, sc.chNext);
+	}
+
+	void ColorizeBibTeX(unsigned start_pos, int length, int /*init_style*/, WordList* /*keywordlists*/[], Accessor& styler) 
+	{
+		bool fold_compact = styler.GetPropertyInt("fold.compact", 1) != 0;
+
+		std::string buffer;
+		buffer.reserve(25);
+
+		// We always colorize a section from the beginning, so let's 
+		// search for the @ character which isn't escaped, i.e. \@
+		while (start_pos > 0 && !IsEntryStart(styler.SafeGetCharAt(start_pos - 1),
+			styler.SafeGetCharAt(start_pos))) {
+			--start_pos; ++length;
+		}
+
+		styler.StartAt(start_pos);
+		styler.StartSegment(start_pos);
+
+		int current_line = styler.GetLine(start_pos);
+		int prev_level = styler.LevelAt(current_line) & SC_FOLDLEVELNUMBERMASK;
+		int current_level = prev_level;
+		int visible_chars = 0;
+
+		bool in_comment = false ;
+		StyleContext sc(start_pos, length, SCE_BIBTEX_DEFAULT, styler);	
+
+		bool going = sc.More(); // needed because of a fuzzy end of file state
+		char closing_brace = 0;
+		bool collect_entry_name = false;
+
+		for (; going; sc.Forward()) {
+			if (!sc.More())
+				going = false; // we need to go one behind the end of text
+
+			if (in_comment) {
+				if (sc.atLineEnd) {
+					sc.SetState(SCE_BIBTEX_DEFAULT);
+					in_comment = false;
+				}
+			} 
+			else {
+				// Found @entry
+				if (IsEntryStart(sc)) {
+					sc.SetState(SCE_BIBTEX_UNKNOWN_ENTRY);
+					sc.Forward();
+					++current_level;
+
+					buffer.clear();
+					collect_entry_name = true;
+				}
+				else if ((sc.state == SCE_BIBTEX_ENTRY || sc.state == SCE_BIBTEX_UNKNOWN_ENTRY) 
+					&& (sc.ch == '{' || sc.ch == '(')) {
+					// Entry name colorization done
+					// Found either a { or a ( after entry's name, e.g. @entry(...) @entry{...}
+					// Closing counterpart needs to be stored.
+					closing_brace = GetClosingBrace(sc.ch);
+
+					sc.SetState(SCE_BIBTEX_DEFAULT); // Don't colorize { (
+
+					// @string doesn't have any key
+					if (EntryWithoutKey(buffer.c_str()))
+						sc.ForwardSetState(SCE_BIBTEX_PARAMETER);
+					else
+						sc.ForwardSetState(SCE_BIBTEX_KEY); // Key/label colorization
+				}
+
+				// Need to handle the case where entry's key is empty
+				// e.g. @book{,...}
+				if (sc.state == SCE_BIBTEX_KEY && sc.ch == ',') {
+					// Key/label colorization done
+					sc.SetState(SCE_BIBTEX_DEFAULT); // Don't colorize the ,
+					sc.ForwardSetState(SCE_BIBTEX_PARAMETER); // Parameter colorization
+				}
+				else if (sc.state == SCE_BIBTEX_PARAMETER && sc.ch == '=') {
+					sc.SetState(SCE_BIBTEX_DEFAULT); // Don't colorize the =
+					sc.ForwardSetState(SCE_BIBTEX_VALUE); // Parameter value colorization
+
+					int start = sc.currentPos;
+
+					// We need to handle multiple situations:
+					// 1. name"one two {three}"
+					// 2. name={one {one two {two}} three}
+					// 3. year=2005
+
+					// Skip ", { until we encounter the first alphanumerical character
+					while (sc.More() && !(std::isalnum(sc.ch) || sc.ch == '"' || sc.ch == '{'))
+						sc.Forward();
+
+					if (sc.More()) {
+						// Store " or {
+						char ch = sc.ch;
+
+						// Not interested in alphanumerical characters
+						if (std::isalnum(ch))
+							ch = 0;
+
+						int skipped = 0;
+
+						if (ch) {
+							// Skip preceding " or { such as in name={{test}}.
+							// Remember how many characters have been skipped
+							// Make sure that empty values, i.e. "" are also handled correctly
+							while (sc.More() && (sc.ch == ch && (ch != '"' || skipped < 1))) {
+								sc.Forward();
+								++skipped;
+							}
+						}
+
+						// Closing counterpart for " is the same character
+						if (ch == '{')
+							ch = '}';
+
+						// We have reached the parameter value
+						// In case the open character was a alnum char, skip until , is found
+						// otherwise until skipped == 0
+						while (sc.More() && (skipped > 0 || !ch && !(sc.ch == ',' || sc.ch == closing_brace))) {
+							// Make sure the character isn't escaped
+							if (sc.chPrev != '\\') {
+								// Parameter value contains a { which is the 2nd case described above
+								if (sc.ch == '{')
+									++skipped; // Remember it
+								else if (sc.ch == '}')
+									--skipped;
+								else if (skipped == 1 && sc.ch == ch && ch == '"') // Don't ignore cases like {"o}
+									skipped = 0;
+							}
+
+							sc.Forward();
+						}
+					}
+
+					// Don't colorize the ,
+					sc.SetState(SCE_BIBTEX_DEFAULT);
+					
+					// Skip until the , or entry's closing closing_brace is found
+					// since this parameter might be the last one
+					while (sc.More() && !(sc.ch == ',' || sc.ch == closing_brace))
+						sc.Forward();
+
+					int state = SCE_BIBTEX_PARAMETER; // The might be more parameters
+
+					// We've reached the closing closing_brace for the bib entry
+					// in case no " or {} has been used to enclose the value,
+					// as in 3rd case described above
+					if (sc.ch == closing_brace) {
+						--current_level;
+						// Make sure the text between entries is not colored
+						// using parameter's style
+						state = SCE_BIBTEX_DEFAULT; 
+					}
+
+					int end = sc.currentPos;
+					current_line = styler.GetLine(end);
+
+					// We have possibly skipped some lines, so the folding levels
+					// have to be adjusted separately
+					for (int i = styler.GetLine(start); i <= styler.GetLine(end); ++i)
+						styler.SetLevel(i, prev_level);
+
+					sc.ForwardSetState(state);
+				}
+
+				if (sc.state == SCE_BIBTEX_PARAMETER && sc.ch == closing_brace) {
+					sc.SetState(SCE_BIBTEX_DEFAULT);
+					--current_level;
+				}
+
+				// Non escaped % found which represents a comment until the end of the line
+				if (sc.chPrev != '\\' && sc.ch == '%') {
+					in_comment = true;
+					sc.SetState(SCE_BIBTEX_COMMENT);
+				}
+			}
+
+			if (sc.state == SCE_BIBTEX_UNKNOWN_ENTRY || sc.state == SCE_BIBTEX_ENTRY) {
+				if (!IsAlphabetic(sc.ch) && collect_entry_name)
+					collect_entry_name = false;
+
+				if (collect_entry_name) {
+					buffer += static_cast<char>(sc.ch);
+
+					// Shortest known entry name is ShortestEntryNameLength characters long
+					if (buffer.size() >= ShortestEntryNameLength) {
+						if (IsKnownEntryName(buffer.c_str()))
+							sc.ChangeState(SCE_BIBTEX_ENTRY);
+						else
+							sc.ChangeState(SCE_BIBTEX_UNKNOWN_ENTRY);
+					}
+				}
+			}
+
+			if (sc.atLineEnd) {
+				int level = prev_level;
+
+				if (visible_chars == 0 && fold_compact)
+					level |= SC_FOLDLEVELWHITEFLAG;
+
+				if ((current_level > prev_level))
+					level |= SC_FOLDLEVELHEADERFLAG;
+				// else if (current_level < prev_level)
+				//	level |= SC_FOLDLEVELBOXFOOTERFLAG; // Deprecated
+
+				if (level != styler.LevelAt(current_line)) {
+					styler.SetLevel(current_line, level);
+				}
+
+				++current_line;
+				prev_level = current_level;
+				visible_chars = 0;
+			}
+
+			if (!isspacechar(sc.ch))
+				++visible_chars;
+		}
+
+		sc.Complete();
+
+		// Fill in the real level of the next line, keeping the current flags as they will be filled in later
+		int flagsNext = styler.LevelAt(current_line) & ~SC_FOLDLEVELNUMBERMASK;
+		styler.SetLevel(current_line, prev_level | flagsNext);
+	}
+}
+
+LexerModule lmBibTeX(SCLEX_BIBTEX, ColorizeBibTeX, "bib", 0, 0);
diff -druN --strip-trailing-cr original/lexers/LexTeX.cxx modified/lexers/LexTeX.cxx
--- original/lexers/LexTeX.cxx	2010-09-01 05:13:30.000000000 +0200
+++ modified/lexers/LexTeX.cxx	2010-09-11 00:43:16.945312500 +0200
@@ -16,12 +16,15 @@
 // TeX Folding code added by instanton (soft_share@126.com) with borrowed code from VisualTeX source by Alex Romanenko.
 // Version: June 22, 2007
 
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-#include <stdarg.h>
-#include <assert.h>
-#include <ctype.h>
+// Modifications for the TeXnicCenter Project by Sergiu Dotenco
+// Version: May 4, 2009
+
+#include <algorithm>
+#include <functional>
+#include <cassert>
+#include <cstdlib>
+#include <cstring>
+#include <cctype>
 
 #include "ILexer.h"
 #include "Scintilla.h"
@@ -69,430 +72,666 @@
 // todo: lexer.tex.auto.if
 
 // Auxiliary functions:
+namespace {
+#pragma region Auxiliary functions
 
-static inline bool endOfLine(Accessor &styler, unsigned int i) {
-	return
-      (styler[i] == '\n') || ((styler[i] == '\r') && (styler.SafeGetCharAt(i + 1) != '\n')) ;
-}
+	template<class Predicate>
+	bool SkipWhileCurrent( StyleContext &sc, Predicate pred)
+	{
+		while (sc.More() && pred(sc.ch))
+			sc.Forward();
 
-static inline bool isTeXzero(int ch) {
-	return
-      (ch == '%') ;
-}
+		return pred(sc.ch);
+	}
 
-static inline bool isTeXone(int ch) {
-	return
-      (ch == '[') || (ch == ']') || (ch == '=') || (ch == '#') ||
-      (ch == '(') || (ch == ')') || (ch == '<') || (ch == '>') ||
-      (ch == '"') ;
-}
+	template<class Predicate>
+	bool SkipWhileNext( StyleContext &sc, Predicate pred)
+	{
+		while (sc.More() && pred(sc.chNext))
+			sc.Forward();
 
-static inline bool isTeXtwo(int ch) {
-	return
-      (ch == '{') || (ch == '}') || (ch == '$') ;
-}
+		return pred(sc.chNext);
+	}
 
-static inline bool isTeXthree(int ch) {
-	return
-      (ch == '~') || (ch == '^') || (ch == '_') || (ch == '&') ||
-      (ch == '-') || (ch == '+') || (ch == '\"') || (ch == '`') ||
-      (ch == '/') || (ch == '|') || (ch == '%') ;
-}
+	template<class Predicate>
+	bool SkipWhileContext( StyleContext &sc, Predicate pred)
+	{
+		while (sc.More() && pred(sc))
+			sc.Forward();
 
-static inline bool isTeXfour(int ch) {
-	return
-      (ch == '\\') ;
-}
+		return pred(sc);
+	}
 
-static inline bool isTeXfive(int ch) {
-	return
-      ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z')) ||
-      (ch == '@') || (ch == '!') || (ch == '?') ;
-}
+	bool SkipSpaces( StyleContext& sc )
+	{
+		return SkipWhileCurrent(sc,std::bind2nd(std::equal_to<char>(),' '));
+	}
 
-static inline bool isTeXsix(int ch) {
-	return
-      (ch == ' ') ;
-}
+	bool SkipToOpenBrace( StyleContext& sc )
+	{
+		return SkipWhileCurrent(sc,std::bind2nd(std::not2(std::equal_to<char>()),'{'));
+	}
 
-static inline bool isTeXseven(int ch) {
-	return
-      (ch == '^') ;
-}
+	bool EndOfLine(Accessor &styler, unsigned int i)
+	{
+		return (styler[i] == '\n') || ((styler[i] == '\r') && (styler.SafeGetCharAt(i + 1) != '\n'));
+	}
 
-// Interface determination
+	bool IsComment(int ch)
+	{
+		return ch == '%';
+	}
 
-static int CheckTeXInterface(
-    unsigned int startPos,
-    int length,
-    Accessor &styler,
-	int defaultInterface) {
+	bool IsUsePackage(const char* key)
+	{
+		return std::strcmp(key, "usepackage") == 0;
+	}
 
-    char lineBuffer[1024] ;
-	unsigned int linePos = 0 ;
+	bool IsDocumentClass(const char* key)
+	{
+		return std::strcmp(key, "documentclass") == 0;
+	}
 
-    // some day we can make something lexer.tex.mapping=(all,0)(nl,1)(en,2)...
+	bool isTeXone(int ch)
+	{
+		return  (ch == '[') || (ch == ']') || (ch == '=') || (ch == '#') ||
+			(ch == '(') || (ch == ')') || (ch == '<') || (ch == '>') ||
+			(ch == '"');
+	}
 
-    if (styler.SafeGetCharAt(0) == '%') {
-        for (unsigned int i = 0; i < startPos + length; i++) {
-            lineBuffer[linePos++] = styler.SafeGetCharAt(i) ;
-            if (endOfLine(styler, i) || (linePos >= sizeof(lineBuffer) - 1)) {
-                lineBuffer[linePos] = '\0';
-                if (strstr(lineBuffer, "interface=all")) {
-                    return 0 ;
-				} else if (strstr(lineBuffer, "interface=tex")) {
-                    return 1 ;
-                } else if (strstr(lineBuffer, "interface=nl")) {
-                    return 2 ;
-                } else if (strstr(lineBuffer, "interface=en")) {
-                    return 3 ;
-                } else if (strstr(lineBuffer, "interface=de")) {
-                    return 4 ;
-                } else if (strstr(lineBuffer, "interface=cz")) {
-                    return 5 ;
-                } else if (strstr(lineBuffer, "interface=it")) {
-                    return 6 ;
-                } else if (strstr(lineBuffer, "interface=ro")) {
-                    return 7 ;
-                } else if (strstr(lineBuffer, "interface=latex")) {
-					// we will move latex cum suis up to 91+ when more keyword lists are supported
-                    return 8 ;
-				} else if (styler.SafeGetCharAt(1) == 'D' && strstr(lineBuffer, "%D \\module")) {
-					// better would be to limit the search to just one line
-					return 3 ;
-                } else {
-                    return defaultInterface ;
-                }
-            }
-		}
-    }
+	bool isWordChar(int ch)
+	{
+		return ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'));
+	}
 
-    return defaultInterface ;
-}
+	bool isTeXtwo(int ch)
+	{
+		return ch == '{' || ch == '}' || ch == '$';
+	}
 
-static void ColouriseTeXDoc(
-    unsigned int startPos,
-    int length,
-    int,
-    WordList *keywordlists[],
-    Accessor &styler) {
+	bool isTeXthree(int ch)
+	{
+		return (ch == '~') || (ch == '^') || (ch == '_') || (ch == '&') ||
+			(ch == '-') || (ch == '+') || (ch == '\"') || (ch == '`') ||
+			(ch == '/') || (ch == '|') || (ch == '%');
+	}
 
-	styler.StartAt(startPos) ;
-	styler.StartSegment(startPos) ;
+	bool IsEscape(int ch)
+	{
+		return ch == '\\';
+	}
 
-	bool processComment   = styler.GetPropertyInt("lexer.tex.comment.process",   0) == 1 ;
-	bool useKeywords      = styler.GetPropertyInt("lexer.tex.use.keywords",      1) == 1 ;
-	bool autoIf           = styler.GetPropertyInt("lexer.tex.auto.if",           1) == 1 ;
-	int  defaultInterface = styler.GetPropertyInt("lexer.tex.interface.default", 1) ;
+	bool isTeXfive(int ch)
+	{
+		return ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z')) ||
+			(ch == '@') || (ch == '!') || (ch == '?');
+	}
 
-	char key[100] ;
-	int  k ;
-	bool newifDone = false ;
-	bool inComment = false ;
+	bool IsSpace(int ch)
+	{
+		return ch == ' ';
+	}
 
-	int currentInterface = CheckTeXInterface(startPos,length,styler,defaultInterface) ;
+	bool isTeXseven(int ch)
+	{
+		return ch == '^';
+	}
 
-    if (currentInterface == 0) {
-        useKeywords = false ;
-        currentInterface = 1 ;
-    }
+	bool IsDigit(int ch)
+	{
+		return ch >= '0' && ch <= '9';
+	}
 
-    WordList &keywords = *keywordlists[currentInterface-1] ;
+	bool equal_strings(const char* s1, const char* s2)
+	{
+		return std::strcmp(s1, s2) == 0;
+	}
 
-	StyleContext sc(startPos, length, SCE_TEX_TEXT, styler);
+	bool IsCommentLine(int line, Accessor &styler)
+	{
+		int pos = styler.LineStart(line);
+		int eol_pos = styler.LineStart(line + 1) - 1;
 
-	bool going = sc.More() ; // needed because of a fuzzy end of file state
+		int startpos = pos;
 
-	for (; going; sc.Forward()) {
+		while (startpos < eol_pos) {
+			char ch = styler[startpos];
 
-		if (! sc.More()) { going = false ; } // we need to go one behind the end of text
+			if (ch != '%' && ch != ' ') 
+				return false;
+			else if (ch == '%')
+				return true;
 
-		if (inComment) {
-			if (sc.atLineEnd) {
-				sc.SetState(SCE_TEX_TEXT) ;
-				newifDone = false ;
-				inComment = false ;
-			}
-		} else {
-			if (! isTeXfive(sc.ch)) {
-				if (sc.state == SCE_TEX_COMMAND) {
-					if (sc.LengthCurrent() == 1) { // \<noncstoken>
-						if (isTeXseven(sc.ch) && isTeXseven(sc.chNext)) {
-							sc.Forward(2) ; // \^^ and \^^<token>
-						}
-						sc.ForwardSetState(SCE_TEX_TEXT) ;
-					} else {
-						sc.GetCurrent(key, sizeof(key)-1) ;
-						k = strlen(key) ;
-						memmove(key,key+1,k) ; // shift left over escape token
-						key[k] = '\0' ;
-						k-- ;
-						if (! keywords || ! useKeywords) {
-							sc.SetState(SCE_TEX_COMMAND) ;
-							newifDone = false ;
-						} else if (k == 1) { //\<cstoken>
-							sc.SetState(SCE_TEX_COMMAND) ;
-							newifDone = false ;
-						} else if (keywords.InList(key)) {
-    						sc.SetState(SCE_TEX_COMMAND) ;
-							newifDone = autoIf && (strcmp(key,"newif") == 0) ;
-						} else if (autoIf && ! newifDone && (key[0] == 'i') && (key[1] == 'f') && keywords.InList("if")) {
-	    					sc.SetState(SCE_TEX_COMMAND) ;
-						} else {
-							sc.ChangeState(SCE_TEX_TEXT) ;
-							sc.SetState(SCE_TEX_TEXT) ;
-							newifDone = false ;
-						}
-					}
-				}
-				if (isTeXzero(sc.ch)) {
-					sc.SetState(SCE_TEX_SYMBOL);
+			++startpos;
+		}
 
-					if (!endOfLine(styler,sc.currentPos + 1))
-						sc.ForwardSetState(SCE_TEX_DEFAULT) ;
+		return false;
+	}
 
-					inComment = ! processComment ;
-					newifDone = false ;
-				} else if (isTeXseven(sc.ch) && isTeXseven(sc.chNext)) {
-					sc.SetState(SCE_TEX_TEXT) ;
-					sc.ForwardSetState(SCE_TEX_TEXT) ;
-				} else if (isTeXone(sc.ch)) {
-					sc.SetState(SCE_TEX_SPECIAL) ;
-					newifDone = false ;
-				} else if (isTeXtwo(sc.ch)) {
-					sc.SetState(SCE_TEX_GROUP) ;
-					newifDone = false ;
-				} else if (isTeXthree(sc.ch)) {
-					sc.SetState(SCE_TEX_SYMBOL) ;
-					newifDone = false ;
-				} else if (isTeXfour(sc.ch)) {
-					sc.SetState(SCE_TEX_COMMAND) ;
-				} else if (isTeXsix(sc.ch)) {
-					sc.SetState(SCE_TEX_TEXT) ;
-				} else if (sc.atLineEnd) {
-					sc.SetState(SCE_TEX_TEXT) ;
-					newifDone = false ;
-					inComment = false ;
-				} else {
-					sc.SetState(SCE_TEX_TEXT) ;
+	const char* const verbatim[] = {
+		"verbatim",
+		"listings"
+	};
+
+	bool IsVerbatimEnvironment(const char* s)
+	{
+		const char* const* end = verbatim + sizeof(verbatim) / sizeof(*verbatim);
+		return std::find_if(verbatim,end,std::bind2nd(std::ptr_fun(equal_strings),s)) != end;
+	}
+
+	bool IsTeXSecond(int ch)
+	{
+		return std::isprint(ch) != 0;
+	}
+
+	const char* const units[] = {
+		"em",
+		"ex",
+		"pt",
+		"pc",
+		"in",
+		"bp",
+		"cm",
+		"mm",
+		"dd",
+		"cc",
+		"sp"
+	};
+
+#pragma endregion
+
+	// Interface determination
+	int CheckTeXInterface(unsigned startPos, int length, Accessor &styler, int defaultInterface)
+	{
+		char lineBuffer[1024];
+		unsigned int linePos = 0;
+
+		// some day we can make something lexer.tex.mapping=(all,0)(nl,1)(en,2)...
+
+		if (styler.SafeGetCharAt(0) == '%') {
+			for (unsigned int i = 0; i < startPos + length; i++) {
+				lineBuffer[linePos++] = styler.SafeGetCharAt(i);
+
+				if (EndOfLine(styler, i) || (linePos >= sizeof (lineBuffer) - 1)) {
+					lineBuffer[linePos] = '\0';
+
+					if (std::strstr(lineBuffer, "interface=all")) {
+						return 0;
+					}
+					else if (std::strstr(lineBuffer, "interface=tex")) {
+						return 1;
+					}
+					else if (std::strstr(lineBuffer, "interface=nl")) {
+						return 2;
+					}
+					else if (std::strstr(lineBuffer, "interface=en")) {
+						return 3;
+					}
+					else if (std::strstr(lineBuffer, "interface=de")) {
+						return 4;
+					}
+					else if (std::strstr(lineBuffer, "interface=cz")) {
+						return 5;
+					}
+					else if (std::strstr(lineBuffer, "interface=it")) {
+						return 6;
+					}
+					else if (std::strstr(lineBuffer, "interface=ro")) {
+						return 7;
+					}
+					else if (std::strstr(lineBuffer, "interface=latex")) {
+						// we will move latex cum suis up to 91+ when more keyword lists are supported
+						return 8;
+					}
+					else if (styler.SafeGetCharAt(1) == 'D' && std::strstr(lineBuffer, "%D \\module")) {
+						// better would be to limit the search to just one line
+						return 3;
+					}
+					else {
+						return defaultInterface;
+					}
 				}
-			} else if (sc.state != SCE_TEX_COMMAND) {
-				sc.SetState(SCE_TEX_TEXT) ;
 			}
 		}
+
+		return defaultInterface;
 	}
-	sc.ChangeState(SCE_TEX_TEXT) ;
-	sc.Complete();
 
-}
+	void ColouriseTeXDoc(unsigned startPos, int length, int, WordList** keywordlists, Accessor &styler)
+	{
+		styler.StartAt(startPos);
+		styler.StartSegment(startPos);
 
+		bool processComment = styler.GetPropertyInt("lexer.tex.comment.process", 0) == 1;
+		bool useKeywords = styler.GetPropertyInt("lexer.tex.use.keywords", 1) == 1;
+		bool autoIf = styler.GetPropertyInt("lexer.tex.auto.if", 1) == 1;
+		int defaultInterface = styler.GetPropertyInt("lexer.tex.interface.default", 1);
 
-static inline bool isNumber(int ch) {
-	return
-      (ch == '0') || (ch == '1') || (ch == '2') ||
-      (ch == '3') || (ch == '4') || (ch == '5') ||
-      (ch == '6') || (ch == '7') || (ch == '8') || (ch == '9');
-}
+		char key[100];
+		const int key_length = sizeof(key) - 1;
 
-static inline bool isWordChar(int ch) {
-	return ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'));
-}
+		int k;
+		bool newifDone = false;
+		bool inComment = false;
 
-static int ParseTeXCommand(unsigned int pos, Accessor &styler, char *command)
-{
-  int length=0;
-  char ch=styler.SafeGetCharAt(pos+1);
+		int currentInterface = CheckTeXInterface(startPos, length, styler, defaultInterface);
 
-  if(ch==',' || ch==':' || ch==';' || ch=='%'){
-      command[0]=ch;
-      command[1]=0;
-	  return 1;
-  }
+		if (currentInterface == 0) {
+			useKeywords = false;
+			currentInterface = 1;
+		}
 
-  // find end
-     while(isWordChar(ch) && !isNumber(ch) && ch!='_' && ch!='.' && length<100){
-          command[length]=ch;
-          length++;
-          ch=styler.SafeGetCharAt(pos+length+1);
-     }
+		WordList &keywords = *keywordlists[currentInterface - 1];
 
-  command[length]='\0';
-  if(!length) return 0;
-  return length+1;
-}
+		int group_depth = 0;
+		bool next_group_name = false;
+		int text_style = SCE_TEX_TEXT;
+		int line = styler.GetLine(startPos);
 
-static int classifyFoldPointTeXPaired(const char* s) {
-	int lev=0;
-	if (!(isdigit(s[0]) || (s[0] == '.'))){
-		if (strcmp(s, "begin")==0||strcmp(s,"FoldStart")==0||
-			strcmp(s,"abstract")==0||strcmp(s,"unprotect")==0||
-			strcmp(s,"title")==0||strncmp(s,"start",5)==0||strncmp(s,"Start",5)==0||
-			strcmp(s,"documentclass")==0||strncmp(s,"if",2)==0
-			)
-			lev=1;
-		if (strcmp(s, "end")==0||strcmp(s,"FoldStop")==0||
-			strcmp(s,"maketitle")==0||strcmp(s,"protect")==0||
-			strncmp(s,"stop",4)==0||strncmp(s,"Stop",4)==0||
-			strcmp(s,"fi")==0
-			)
-		lev=-1;
-	}
-	return lev;
-}
+		if (line > 0)
+			text_style = styler.StyleAt(styler.LineStart(line) - 1);
 
-static int classifyFoldPointTeXUnpaired(const char* s) {
-	int lev=0;
-	if (!(isdigit(s[0]) || (s[0] == '.'))){
-		if (strcmp(s,"part")==0||
-			strcmp(s,"chapter")==0||
-			strcmp(s,"section")==0||
-			strcmp(s,"subsection")==0||
-			strcmp(s,"subsubsection")==0||
-			strcmp(s,"CJKfamily")==0||
-			strcmp(s,"appendix")==0||
-			strcmp(s,"Topic")==0||strcmp(s,"topic")==0||
-			strcmp(s,"subject")==0||strcmp(s,"subsubject")==0||
-			strcmp(s,"def")==0||strcmp(s,"gdef")==0||strcmp(s,"edef")==0||
-			strcmp(s,"xdef")==0||strcmp(s,"framed")==0||
-			strcmp(s,"frame")==0||
-			strcmp(s,"foilhead")==0||strcmp(s,"overlays")==0||strcmp(s,"slide")==0
-			){
-			    lev=1;
+		int command_style = text_style == SCE_TEX_INLINE_MATH ? SCE_TEX_INLINE_MATH_COMMAND : SCE_TEX_COMMAND;
+
+		StyleContext sc(startPos, length, text_style, styler);
+
+		bool going = sc.More(); // needed because of a fuzzy end of file state
+
+		for (; going; sc.Forward()) {
+
+			if (!sc.More()) {
+				going = false;
+			} // we need to go one behind the end of text
+
+			if (inComment) {
+				if (sc.atLineEnd) {
+					sc.SetState(text_style);
+					newifDone = false;
+					inComment = false;
+				}
+				else
+					sc.SetState(SCE_TEX_COMMENT);
 			}
-	}
-	return lev;
-}
+			else {
+				if (text_style == SCE_TEX_INLINE_MATH && sc.currentPos > 0 &&
+						sc.ch == '$' && (sc.chPrev != '\\' || styler.SafeGetCharAt(sc.currentPos - 2) == '\\')) {
+					sc.SetState(SCE_TEX_GROUP);
+					text_style = SCE_TEX_TEXT;
+					command_style = SCE_TEX_COMMAND;
+					sc.ForwardSetState(text_style);
+				}
 
-static bool IsTeXCommentLine(int line, Accessor &styler) {
-	int pos = styler.LineStart(line);
-	int eol_pos = styler.LineStart(line + 1) - 1;
+				bool done = false;
+				bool reset = false;
+				bool cnt = true;
 
-	int startpos = pos;
+				if (sc.state == SCE_TEX_DIGIT) {
+					const int count = sizeof(units) / sizeof(*units);
+					bool stop = false;
 
-	while (startpos<eol_pos){
-		char ch = styler[startpos];
-		if (ch!='%' && ch!=' ') return false;
-		else if (ch=='%') return true;
-		startpos++;
-	}
+					for (int i = 0; i < count && !stop; ++i)
+						if (sc.Match(units[i]))
+							stop = true;
 
-	return false;
-}
+					if (stop) {
+						sc.SetState(SCE_TEX_UNIT);
+						sc.ForwardSetState(sc.state);
+						done = true;
+						cnt = false;
+					}
+				}
 
-// FoldTeXDoc: borrowed from VisualTeX with modifications
+				if (cnt) {
+					if (!isTeXfive(sc.ch)) {
+						if (sc.state == command_style) {
+							if (sc.LengthCurrent() == 1) { // \<noncstoken>
+								if (isTeXseven(sc.ch) && isTeXseven(sc.chNext)) {
+									sc.Forward(2); // \^^ and \^^<token>
+								}
 
-static void FoldTexDoc(unsigned int startPos, int length, int, WordList *[], Accessor &styler)
-{
-	bool foldCompact = styler.GetPropertyInt("fold.compact", 1) != 0;
-	unsigned int endPos = startPos+length;
-	int visibleChars=0;
-	int lineCurrent=styler.GetLine(startPos);
-	int levelPrev=styler.LevelAt(lineCurrent) & SC_FOLDLEVELNUMBERMASK;
-	int levelCurrent=levelPrev;
-	char chNext=styler[startPos];
-	char buffer[100]="";
+								if (!(text_style == SCE_TEX_INLINE_MATH && sc.chNext == '$')) {
+									if (!IsDigit(sc.ch))
+										sc.ForwardSetState(text_style);									
+								}
+								else
+									done = true;
+							}
+							else {
+								sc.GetCurrent(key, key_length);
+								k = std::strlen(key);
+								std::memmove(key, key + 1, k); // shift left over escape token
+								key[k--] = '\0';
 
-	for (unsigned int i=startPos; i < endPos; i++) {
-		char ch=chNext;
-		chNext=styler.SafeGetCharAt(i+1);
-		bool atEOL = (ch == '\r' && chNext != '\n') || (ch == '\n');
+								if (IsUsePackage(key)) {
+									// \usepackage
+									sc.ChangeState(SCE_TEX_USE_PACKAGE);
+									newifDone = false;
+								}
+								else if (IsDocumentClass(key)) {
+									// \documentclass
+									sc.ChangeState(SCE_TEX_DOCUMENTCLASS);
+									newifDone = false;
+								}
+								else if (!keywords || !useKeywords) {
+									sc.SetState(command_style);
+									newifDone = false;
+								}
+								else if (k == 1) { //\<cstoken>
+									sc.SetState(command_style);
+									newifDone = false;
+								}
+								else if (keywords.InList(key)) {
+									sc.SetState(command_style);
+									newifDone = autoIf && (std::strcmp(key, "newif") == 0);
+								}
+								else if (autoIf && !newifDone && (key[0] == 'i') && (key[1] == 'f') && keywords.InList("if")) {
+									sc.SetState(command_style);
+								}
+								else {
+									sc.ChangeState(text_style);
+									sc.SetState(text_style);
+									newifDone = false;
+								}
 
-        if(ch=='\\') {
-            ParseTeXCommand(i, styler, buffer);
-			levelCurrent += classifyFoldPointTeXPaired(buffer)+classifyFoldPointTeXUnpaired(buffer);
+								if (std::strcmp(key, "begin") == 0) {
+									next_group_name = true;
+									++group_depth;
+								}
+								else if (std::strcmp(key, "end") == 0) {
+									next_group_name = true;
+
+									if (group_depth > 0)
+										--group_depth;
+								}
+							}
+						}
+
+						if (!done) {
+							if (IsComment(sc.ch)) {
+								sc.SetState(SCE_TEX_COMMENT);
+
+								inComment = !processComment;
+								newifDone = false;
+							}
+							else if (isTeXseven(sc.ch) && isTeXseven(sc.chNext)) {
+								sc.SetState(text_style);
+								sc.ForwardSetState(SCE_TEX_TEXT);
+							}
+							else if (isTeXone(sc.ch)) {
+								sc.SetState(SCE_TEX_SPECIAL);
+								newifDone = false;
+							}
+							else if (sc.ch == '$' && text_style != SCE_TEX_INLINE_MATH) {
+								sc.SetState(SCE_TEX_GROUP);
+								text_style = SCE_TEX_INLINE_MATH;
+								command_style = SCE_TEX_INLINE_MATH_COMMAND;
+
+								newifDone = false;
+							}
+							else if (isTeXtwo(sc.ch)) {
+								sc.SetState(SCE_TEX_GROUP);
+								newifDone = false;
+
+								if (sc.ch == '{' && next_group_name) {
+									sc.ForwardSetState(SCE_TEX_GROUP_NAME);
+
+									SkipWhileNext(sc,std::bind2nd(std::equal_to<char>(),' ')); // while sc.chNext == ' '
+									SkipWhileNext(sc,std::bind2nd(std::not2(std::equal_to<char>()),'}')); // while sc.chNext != '}'
+
+									next_group_name = false;
+								}
+							}
+							else if (isTeXthree(sc.ch)) {
+								sc.SetState(SCE_TEX_SYMBOL);
+								newifDone = false;
+							}
+							else if (IsEscape(sc.ch)) {
+								sc.SetState(command_style);
+
+								if (!IsDigit(sc.chNext) && !IsTeXSecond(sc.chNext))
+									sc.ForwardSetState(text_style);
+							}
+							else if (IsSpace(sc.ch)) {
+								reset = true;
+							}
+							else if (IsDigit(sc.ch)) {
+								sc.SetState(SCE_TEX_DIGIT);
+							}
+							else if (sc.atLineEnd) {
+								reset = true;
+								newifDone = inComment = false;
+							}
+							else {
+								reset = true;
+							}
+						}
+						else if (sc.state != command_style) {
+							reset = true;
+						}
+					}
+					else if (sc.state != command_style) {
+						reset = true;
+						sc.SetState(text_style);
+					}
+				}
+
+				if (reset)
+					sc.SetState(text_style);
+			}
 		}
 
-		if (levelCurrent > SC_FOLDLEVELBASE && ((ch == '\r' || ch=='\n') && (chNext == '\\'))) {
-            ParseTeXCommand(i+1, styler, buffer);
-			levelCurrent -= classifyFoldPointTeXUnpaired(buffer);
+		sc.ChangeState(text_style);
+		sc.Complete();
+	}
+
+	int ParseTeXCommand(unsigned int pos, Accessor &styler, char *command)
+	{
+		int length = 0;
+		char ch = styler.SafeGetCharAt(pos + 1);
+
+		if (ch == ',' || ch == ':' || ch == ';' || ch == '%') {
+			command[0] = ch;
+			command[1] = 0;
+			return 1;
 		}
 
-	char chNext2;
-	char chNext3;
-	char chNext4;
-	char chNext5;
-	chNext2=styler.SafeGetCharAt(i+2);
-	chNext3=styler.SafeGetCharAt(i+3);
-	chNext4=styler.SafeGetCharAt(i+4);
-	chNext5=styler.SafeGetCharAt(i+5);
+		// find end
+		while (isWordChar(ch) && !IsDigit(ch) && ch != '_' && ch != '.' && length < 100) {
+			command[length] = ch;
+			++length;
+			ch = styler.SafeGetCharAt(pos + length + 1);
+		}
 
-	bool atEOfold = (ch == '%') &&
-			(chNext == '%') && (chNext2=='}') &&
-				(chNext3=='}')&& (chNext4=='-')&& (chNext5=='-');
+		command[length] = '\0';
 
-	bool atBOfold = (ch == '%') &&
-			(chNext == '%') && (chNext2=='-') &&
-				(chNext3=='-')&& (chNext4=='{')&& (chNext5=='{');
+		if (!length)
+			return 0;
 
-	if(atBOfold){
-		levelCurrent+=1;
+		return length + 1;
 	}
 
-	if(atEOfold){
-		levelCurrent-=1;
-	}
+	int classifyFoldPointTeXPaired(const char* s)
+	{
+		int lev = 0;
 
-	if(ch=='\\' && chNext=='['){
-		levelCurrent+=1;
-	}
+		if (!(std::isdigit(s[0]) || (s[0] == '.'))) {
+			if (std::strcmp(s, "begin") == 0 || std::strcmp(s, "FoldStart") == 0 ||
+					std::strcmp(s, "begingroup") == 0 ||
+					std::strcmp(s, "abstract") == 0 || std::strcmp(s, "unprotect") == 0 ||
+					std::strcmp(s, "makeatletter") == 0 ||
+					std::strcmp(s, "title") == 0 || std::strncmp(s, "start", 5) == 0 || std::strncmp(s, "Start", 5) == 0 ||
+					std::strcmp(s, "documentclass") == 0 || std::strncmp(s, "if", 2) == 0
+					)
+				lev = 1;
+			if (std::strcmp(s, "end") == 0 || std::strcmp(s, "FoldStop") == 0 ||
+					std::strcmp(s, "endgroup") == 0 ||
+					std::strcmp(s, "maketitle") == 0 || std::strcmp(s, "protect") == 0 ||
+					std::strcmp(s, "makeatother") == 0 ||
+					std::strncmp(s, "stop", 4) == 0 || std::strncmp(s, "Stop", 4) == 0 ||
+					std::strcmp(s, "fi") == 0
+					)
+				lev = -1;
+		}
 
-	if(ch=='\\' && chNext==']'){
-		levelCurrent-=1;
+		return lev;
 	}
 
-	bool foldComment = styler.GetPropertyInt("fold.comment") != 0;
+	int classifyFoldPointTeXUnpaired(const char* s)
+	{
+		int lev = 0;
 
-	if (foldComment && atEOL && IsTeXCommentLine(lineCurrent, styler))
-        {
-            if (lineCurrent==0 && IsTeXCommentLine(lineCurrent + 1, styler)
-				)
-                levelCurrent++;
-            else if (lineCurrent!=0 && !IsTeXCommentLine(lineCurrent - 1, styler)
-               && IsTeXCommentLine(lineCurrent + 1, styler)
-				)
-                levelCurrent++;
-            else if (lineCurrent!=0 && IsTeXCommentLine(lineCurrent - 1, styler) &&
-                     !IsTeXCommentLine(lineCurrent+1, styler))
-                levelCurrent--;
-        }
+		if (!(std::isdigit(s[0]) || (s[0] == '.'))) {
+			static const char* const sections[] = {
+			   "part",
+			   "chapter",
+			   "section",
+			   "subsection",
+			   "subsubsection",
+			   "paragraph",
+			   "subparagraph",
+			   "addpart",
+			   "addchap",
+			   "addsec",
+			   "addsubsec",
+			   "minisec",
+			   //"newcommand",
+			   //"renewcommand",
+			   "newenvironment",
+			   "renewenvironment",
+			   "CJKfamily",
+			   "appendix",
+			   "Topic",
+			   "topic",
+			   "subject",
+			   "subsubject",
+			   "def",
+			   "gdef",
+			   "edef",
+			   "xdef",
+			   "framed",
+			   "frame",
+			   "foilhead",
+			   "overlays",
+			   "slide"
+			};
 
-//---------------------------------------------------------------------------------------------
+			const std::size_t count = sizeof (sections) / sizeof (*sections);
 
-		if (atEOL) {
-			int lev = levelPrev;
-			if (visibleChars == 0 && foldCompact)
-				lev |= SC_FOLDLEVELWHITEFLAG;
-			if ((levelCurrent > levelPrev) && (visibleChars > 0))
-				lev |= SC_FOLDLEVELHEADERFLAG;
-			if (lev != styler.LevelAt(lineCurrent)) {
-				styler.SetLevel(lineCurrent, lev);
-			}
-			lineCurrent++;
-			levelPrev = levelCurrent;
-			visibleChars = 0;
+			if (std::find_if(sections, sections + count, std::bind2nd(std::ptr_fun(equal_strings), s)) != sections + count)
+				lev = 1;
 		}
 
-		if (!isspacechar(ch))
-			visibleChars++;
+		return lev;
 	}
 
-	// Fill in the real level of the next line, keeping the current flags as they will be filled in later
-	int flagsNext = styler.LevelAt(lineCurrent) & ~SC_FOLDLEVELNUMBERMASK;
-	styler.SetLevel(lineCurrent, levelPrev | flagsNext);
-}
+	// FoldTeXDoc: borrowed from VisualTeX with modifications
+	void FoldTexDoc(unsigned startPos, int length, int, WordList**, Accessor &styler)
+	{
+		bool foldCompact = styler.GetPropertyInt("fold.compact", 1) != 0;
+		unsigned endPos = startPos + length;
+		int visibleChars = 0;
+		int lineCurrent = styler.GetLine(startPos);
+		int levelPrev = styler.LevelAt(lineCurrent) & SC_FOLDLEVELNUMBERMASK;
+		int levelCurrent = levelPrev;
+		char chNext = styler[startPos];
+		char buffer[100] = "";
 
+		for (unsigned i = startPos; i < endPos; ++i) {
+			char ch = chNext;
+			chNext = styler.SafeGetCharAt(i + 1);
+			bool atEOL = (ch == '\r' && chNext != '\n') || (ch == '\n');
 
+			if (ch == '\\') {
+				ParseTeXCommand(i, styler, buffer);
+				levelCurrent += classifyFoldPointTeXPaired(buffer) + classifyFoldPointTeXUnpaired(buffer);
+			}
 
+			if (levelCurrent > SC_FOLDLEVELBASE && ((ch == '\r' || ch == '\n') && (chNext == '\\'))) {
+				ParseTeXCommand(i + 1, styler, buffer);
+				levelCurrent -= classifyFoldPointTeXUnpaired(buffer);
+			}
 
-static const char * const texWordListDesc[] = {
-    "TeX, eTeX, pdfTeX, Omega",
-    "ConTeXt Dutch",
-    "ConTeXt English",
-    "ConTeXt German",
-    "ConTeXt Czech",
-    "ConTeXt Italian",
-    "ConTeXt Romanian",
-	0,
-} ;
+			char chNext2 = styler.SafeGetCharAt(i + 2);
+			char chNext3 = styler.SafeGetCharAt(i + 3);
+			char chNext4 = styler.SafeGetCharAt(i + 4);
+			char chNext5 = styler.SafeGetCharAt(i + 5);
 
-LexerModule lmTeX(SCLEX_TEX,   ColouriseTeXDoc, "tex", FoldTexDoc, texWordListDesc);
+			bool atEOfold = (ch == '%') &&
+					(chNext == '%') && (chNext2 == '}') &&
+					(chNext3 == '}') && (chNext4 == '-') && (chNext5 == '-');
+
+			bool atBOfold = (ch == '%') &&
+					(chNext == '%') && (chNext2 == '-') &&
+					(chNext3 == '-') && (chNext4 == '{') && (chNext5 == '{');
+
+			if (atBOfold) {
+				++levelCurrent;
+			}
+
+			if (atEOfold) {
+				--levelCurrent;
+			}
+
+			if (ch == '\\' && chNext == '[') {
+				++levelCurrent;
+			}
+
+			if (ch == '\\' && chNext == ']') {
+				--levelCurrent;
+			}
+
+			bool foldComment = styler.GetPropertyInt("fold.comment") != 0;
+
+			if (foldComment && atEOL && IsCommentLine(lineCurrent, styler)) {
+				if (lineCurrent == 0 && IsCommentLine(lineCurrent + 1, styler)
+						)
+					++levelCurrent;
+				else if (lineCurrent != 0 && !IsCommentLine(lineCurrent - 1, styler)
+						&& IsCommentLine(lineCurrent + 1, styler)
+						)
+					++levelCurrent;
+				else if (lineCurrent != 0 && IsCommentLine(lineCurrent - 1, styler) &&
+						!IsCommentLine(lineCurrent + 1, styler))
+					--levelCurrent;
+			}
+
+			//---------------------------------------------------------------------------------------------
+
+			if (atEOL) {
+				int lev = levelPrev;
+				if (visibleChars == 0 && foldCompact)
+					lev |= SC_FOLDLEVELWHITEFLAG;
+				if ((levelCurrent > levelPrev) && (visibleChars > 0))
+					lev |= SC_FOLDLEVELHEADERFLAG;
+				if (lev != styler.LevelAt(lineCurrent)) {
+					styler.SetLevel(lineCurrent, lev);
+				}
+
+				++lineCurrent;
+				levelPrev = levelCurrent;
+				visibleChars = 0;
+			}
+
+			if (!isspacechar(ch))
+				++visibleChars;
+		}
+
+		// Fill in the real level of the next line, keeping the current flags as they will be filled in later
+		int flagsNext = styler.LevelAt(lineCurrent) & ~SC_FOLDLEVELNUMBERMASK;
+		styler.SetLevel(lineCurrent, levelPrev | flagsNext);
+	}
+
+	const char * const texWordListDesc[] = {
+	   "TeX, eTeX, pdfTeX, Omega",
+	   "ConTeXt Dutch",
+	   "ConTeXt English",
+	   "ConTeXt German",
+	   "ConTeXt Czech",
+	   "ConTeXt Italian",
+	   "ConTeXt Romanian",
+	   0,
+	};
+}
+
+
+LexerModule lmTeX(SCLEX_TEX, ColouriseTeXDoc, "tex", FoldTexDoc, texWordListDesc);
\ Kein Zeilenumbruch am Dateiende.
diff -druN --strip-trailing-cr original/src/Catalogue.cxx modified/src/Catalogue.cxx
--- original/src/Catalogue.cxx	2010-09-01 05:13:31.000000000 +0200
+++ modified/src/Catalogue.cxx	2010-09-11 02:13:09.596679700 +0200
@@ -92,6 +92,7 @@
 	LINK_LEXER(lmBaan);
 	LINK_LEXER(lmBash);
 	LINK_LEXER(lmBatch);
+	LINK_LEXER(lmBibTeX);
 	LINK_LEXER(lmBlitzBasic);
 	LINK_LEXER(lmBullant);
 	LINK_LEXER(lmCaml);
diff -druN --strip-trailing-cr original/src/Editor.cxx modified/src/Editor.cxx
--- original/src/Editor.cxx	2010-09-01 05:13:31.000000000 +0200
+++ modified/src/Editor.cxx	2010-09-11 01:57:50.602539100 +0200
@@ -108,6 +108,7 @@
 Editor::Editor() {
 	ctrlID = 0;
 
+    showcursor = true;
 	stylesValid = false;
 
 	printMagnification = 0;
@@ -5681,10 +5682,12 @@
 }
 
 void Editor::DisplayCursor(Window::Cursor c) {
-	if (cursorMode == SC_CURSORNORMAL)
-		wMain.SetCursor(c);
-	else
-		wMain.SetCursor(static_cast<Window::Cursor>(cursorMode));
+	if (showcursor) {
+		if (cursorMode == SC_CURSORNORMAL)
+			wMain.SetCursor(c);
+		else
+			wMain.SetCursor(static_cast<Window::Cursor>(cursorMode));
+	}
 }
 
 bool Editor::DragThreshold(Point ptStart, Point ptNow) {
@@ -8743,6 +8746,10 @@
 		pdoc->ChangeLexerState(wParam, lParam);
 		break;
 
+	case SCI_SHOWCURSOR: // TeXnicCenter
+		showcursor = wParam != 0;
+		break;
+
 	default:
 		return DefWndProc(iMessage, wParam, lParam);
 	}
diff -druN --strip-trailing-cr original/src/Editor.h modified/src/Editor.h
--- original/src/Editor.h	2010-09-01 05:13:31.000000000 +0200
+++ modified/src/Editor.h	2010-09-11 00:43:16.976562500 +0200
@@ -150,6 +150,7 @@
 	/** In twoPhaseDraw mode, drawing is performed in two phases, first the background
 	* and then the foreground. This avoids chopping off characters that overlap the next run. */
 	bool twoPhaseDraw;
+	bool showcursor; // TeXnicCenter
 
 	int xOffset;		///< Horizontal scrolled amount in pixels
 	int xCaretMargin;	///< Ensure this many pixels visible on both sides of caret
diff -druN --strip-trailing-cr original/vcbuild/SciLexer.vcproj modified/vcbuild/SciLexer.vcproj
--- original/vcbuild/SciLexer.vcproj	1970-01-01 01:00:00.000000000 +0100
+++ modified/vcbuild/SciLexer.vcproj	2010-09-11 01:47:19.324218700 +0200
@@ -0,0 +1,2720 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9,00"
+	Name="SciLexer"
+	ProjectGUID="{08C13851-869A-49A9-BC48-CBD0779A2280}"
+	RootNamespace="SciLexer"
+	TargetFrameworkVersion="0"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="$(SolutionDir)\Output\Product\$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(SolutionDir)\Output\Intermediate\$(PlatformName)\$(ProjectName)\$(ConfigurationName)"
+			ConfigurationType="2"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="_DEBUG"
+				MkTypLibCompatible="true"
+				SuppressStartupBanner="true"
+				TargetEnvironment="1"
+				TypeLibraryName=".\../bin/SciLexer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="..\include,..\src,..\lexlib"
+				PreprocessorDefinitions="_DEBUG;WIN32;_WINDOWS;_USRDLL;SCI_LEXER;_CRT_SECURE_NO_WARNINGS"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				BrowseInformation="1"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="_DEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="imm32.lib comctl32.lib"
+				LinkIncremental="2"
+				SuppressStartupBanner="true"
+				GenerateDebugInformation="true"
+				RandomizedBaseAddress="1"
+				DataExecutionPrevention="0"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\../bin/SciLexer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="$(SolutionDir)\Output\Product\$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(SolutionDir)\Output\Intermediate\$(PlatformName)\$(ProjectName)\$(ConfigurationName)"
+			ConfigurationType="2"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC60.vsprops"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="NDEBUG"
+				MkTypLibCompatible="true"
+				SuppressStartupBanner="true"
+				TargetEnvironment="1"
+				TypeLibraryName=".\../bin/SciLexer.tlb"
+				HeaderFileName=""
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="1"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="..\include,..\src,..\lexlib"
+				PreprocessorDefinitions="NDEBUG;WIN32;_WINDOWS;_USRDLL;SCI_LEXER;_CRT_SECURE_NO_WARNINGS"
+				StringPooling="true"
+				RuntimeLibrary="2"
+				EnableFunctionLevelLinking="true"
+				WarningLevel="3"
+				SuppressStartupBanner="true"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="NDEBUG"
+				Culture="1033"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				AdditionalDependencies="imm32.lib comctl32.lib"
+				LinkIncremental="1"
+				SuppressStartupBanner="true"
+				GenerateMapFile="true"
+				OptimizeForWindows98="1"
+				RandomizedBaseAddress="1"
+				DataExecutionPrevention="0"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+				SuppressStartupBanner="true"
+				OutputFile=".\../bin/SciLexer.bsc"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+			>
+			<File
+				RelativePath="..\lexlib\Accessor.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\AutoComplete.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\CallTip.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Catalogue.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\CellBuffer.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\CharacterSet.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\CharClassify.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\ContractionState.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Decoration.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Document.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Editor.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\ExternalLexer.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Indicator.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\KeyMap.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAbaqus.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAda.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAPDL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAsm.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAsn1.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexASY.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAU3.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexAVE.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexBaan.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexBash.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexBasic.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexBibTeX.cxx"
+				>
+			</File>
+			<File
+				RelativePath="..\lexers\LexBullant.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCaml.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCLW.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCmake.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCOBOL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexConf.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCPP.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCrontab.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCsound.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexCSS.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexD.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexEiffel.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\LexerBase.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexErlang.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\LexerModule.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\LexerSimple.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexEScript.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexFlagship.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexForth.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexFortran.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexGAP.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexGui4Cli.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexHaskell.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexHTML.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexInno.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexKix.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexLisp.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexLout.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexLua.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMagik.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMarkdown.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMatlab.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMetapost.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMMIXAL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMPT.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMSSQL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexMySQL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexNimrod.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexNsis.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexOpal.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexOthers.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPascal.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPB.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPerl.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPLM.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPOV.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPowerPro.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPowerShell.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexProgress.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPS.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexPython.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexR.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexRebol.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexRuby.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexScriptol.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSmalltalk.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSML.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSorcus.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSpecman.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSpice.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexSQL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTACL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTADS3.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTAL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTCL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTeX.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexTxt2tags.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexVB.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexVerilog.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexVHDL.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexers\LexYAML.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\LineMarker.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\PerLine.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\win32\PlatWin.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\PositionCache.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\PropSetSimple.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\RESearch.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\RunStyles.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\ScintillaBase.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\win32\ScintillaWin.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\win32\ScintRes.rc"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCResourceCompilerTool"
+						PreprocessorDefinitions=""
+						AdditionalIncludeDirectories="\Users\Rainy\Desktop\scintilla220 - Kopie\win32"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCResourceCompilerTool"
+						PreprocessorDefinitions=""
+						AdditionalIncludeDirectories="\Users\Rainy\Desktop\scintilla220 - Kopie\win32"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Selection.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\Style.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\StyleContext.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\UniConversion.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\ViewStyle.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\lexlib\WordList.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="..\src\XPM.cxx"
+				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+						AdditionalIncludeDirectories=""
+						PreprocessorDefinitions=""
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl"
+			>
+			<File
+				RelativePath="..\include\Platform.h"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Resource Files"
+			Filter="ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe"
+			>
+			<File
+				RelativePath="..\win32\Margin.cur"
+				>
+			</File>
+		</Filter>
+		<File
+			RelativePath="ReadMe.txt"
+			>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -druN --strip-trailing-cr original/win32/scintilla.mak modified/win32/scintilla.mak
--- original/win32/scintilla.mak	2010-09-01 05:13:32.000000000 +0200
+++ modified/win32/scintilla.mak	2010-09-11 02:13:09.612304700 +0200
@@ -127,6 +127,7 @@
 	$(DIR_O)\LexBaan.obj \
 	$(DIR_O)\LexBash.obj \
 	$(DIR_O)\LexBasic.obj \
+	$(DIR_O)\LexBibTeX.obj \
 	$(DIR_O)\LexBullant.obj \
 	$(DIR_O)\LexCaml.obj \
 	$(DIR_O)\LexCLW.obj \
@@ -342,6 +343,8 @@
 
 $(DIR_O)\LexBasic.obj: ..\lexers\LexBasic.cxx $(LEX_HEADERS)
 
+$(DIR_O)\LexBibTeX.obj: ..\lexers\LexBibTeX.cxx $(LEX_HEADERS)
+
 $(DIR_O)\LexBullant.obj: ..\lexers\LexBullant.cxx $(LEX_HEADERS)
 
 $(DIR_O)\LexCaml.obj: ..\lexers\LexCaml.cxx $(LEX_HEADERS)
diff -druN --strip-trailing-cr original/win32/scintilla_vc6.mak modified/win32/scintilla_vc6.mak
--- original/win32/scintilla_vc6.mak	2010-09-01 05:13:32.000000000 +0200
+++ modified/win32/scintilla_vc6.mak	2010-09-11 02:13:09.617187500 +0200
@@ -129,6 +129,7 @@
 	$(DIR_O)\LexBaan.obj \
 	$(DIR_O)\LexBash.obj \
 	$(DIR_O)\LexBasic.obj \
+	$(DIR_O)\LexBibTeX.obj \
 	$(DIR_O)\LexBullant.obj \
 	$(DIR_O)\LexCaml.obj \
 	$(DIR_O)\LexCLW.obj \
@@ -344,6 +345,8 @@
 
 $(DIR_O)\LexBasic.obj: ..\lexers\LexBasic.cxx $(LEX_HEADERS)
 
+$(DIR_O)\LexBibTeX.obj: ..\lexers\LexBibTeX.cxx $(LEX_HEADERS)
+
 $(DIR_O)\LexBullant.obj: ..\lexers\LexBullant.cxx $(LEX_HEADERS)
 
 $(DIR_O)\LexCaml.obj: ..\lexers\LexCaml.cxx $(LEX_HEADERS)
